curl -X POST "http://127.0.0.1:8000/uploadfile/" \
  -F "file_type=GGUFUpload" \
  -F "file=@/Users/yui/Documents/GitHub/temp_backend/try/JPV3_evaluation_graph.png"


curl -X POST "http://127.0.0.1:8000/downloadrepo/" \
  -F "repo_name=Frinkles/Phi3JPInitial"

curl -X POST "http://127.0.0.1:8000/download_general_model/" \
-H "Content-Type: application/json" \
-d '{"repo_id": "HuggingFaceTB/SmolLM-135M-Instruct", "hf_token": "your-huggingface-token"}'

uvicorn main:app --reload

curl -X POST "http://localhost:8000/download-and-process-dataset/" -H "Content-Type: application/json" -d '{"name": "izumi-lab/llm-japanese-dataset"}'

curl -X GET "http://localhost:8000/getavailabledatasets/"

curl -X POST "http://127.0.0.1:8000/upload-jsonl/" -H "Content-Type: application/json" -d '{"path": "full_data.jsonl"}'

## csv Requirements:
EITHER:
  2 columns, prompt, and output

OR:
  A column 'messages'


curl -X POST "http://127.0.0.1:8000/load" -H "Content-Type: application/json" -d '{"model_name": "models/Frinkles/Phi3JPInitial/models--Frinkles--Phi3JPInitial", "dataset_path": "local_datasets/japanese_data"}'

curl -X POST "http://127.0.0.1:8000/finetune" \
-H "Content-Type: application/json" \
-d '{
    "model_name": "HuggingFaceTB/SmolLM-135M-Instruct",
    "dataset_path": "path_to_your_dataset",
    "checkpoint_path": "HuggingFaceTB/SmolLM-135M-Instruct"
}'


WINDOWS:

$body = @{
    "name" = "izumi-lab/llm-japanese-dataset"
} | ConvertTo-Json

Invoke-RestMethod -Uri "http://localhost:8000/download-and-process-dataset/" -Method Post -Body $body -ContentType "application/json"


$body = @{
    "repo_id" = "HuggingFaceTB/SmolLM-135M-Instruct"
} | ConvertTo-Json

Invoke-RestMethod -Uri "http://127.0.0.1:5000/download_general_model/" -Method Post -Body $body -ContentType "application/json"


$body = @{
    "model_name" = "models\HuggingFaceTB--SmolLM-135M-Instruct"
    "dataset_path" = "local_datasets/izumi-lab--llm-japanese-dataset"
    "checkpoint_path" = "output"
} | ConvertTo-Json

Invoke-RestMethod -Uri "http://127.0.0.1:8000/finetune" -Method Post -Body $body -ContentType "application/json"


# Define the URL of your FastAPI server and the specific route
$apiUrl = "http://localhost:8000/download_model/"

# Create a hashtable with the JSON body data
$body = @{
    model_id = "TheBloke/TinyLlama-1.1B-Chat-v1.0-GGUF"
    model_file_name = "tinyllama-1.1b-chat-v1.0.Q6_K.gguf"
}

# Convert the hashtable to a JSON string
$bodyJson = $body | ConvertTo-Json

# Send the POST request
Invoke-RestMethod -Uri $apiUrl -Method Post -Body $bodyJson -ContentType "application/json"


#Q6_K IMPORTANT NOTE

# Define the URL of your FastAPI server and the specific route
$apiUrl = "http://localhost:8000/convert-gguf-to-hf/"

# Create a hashtable with the JSON body data
$body = @{
    model_id = "TheBloke/TinyLlama-1.1B-Chat-v1.0-GGUF"
    filename = "tinyllama-1.1b-chat-v1.0.Q3_K_M.gguf"
}

# Convert the hashtable to a JSON string
$bodyJson = $body | ConvertTo-Json

# Send the POST request
Invoke-RestMethod -Uri $apiUrl -Method Post -Body $bodyJson -ContentType "application/json"





# Define the URL of your FastAPI server and the specific route
$apiUrl = "http://localhost:8000/finetune"

# Create a hashtable with the JSON body data
$body = @{
    model_name = "TheBloke/Llama-2-13B-GGUF"
    dataset_path = "local_datasets/izumi-lab--llm-japanese-dataset"
    type = "gguf"
    gguf_file = "llama-2-13b.Q2_K.gguf"
    torch_dtype = "bfloat16"
    bf16 = $true
    learning_rate = 5.0e-06
    num_train_epochs = 3
    attn_implementation = "eager"
    per_device_eval_batch_size = 2
    per_device_train_batch_size = 2
    save_steps = 200
    save_total_limit = 3
    seed = 0
    gradient_checkpointing = $true
    r = 16
    lora_alpha = 32
    lora_dropout = 0.05
    target_modules = "all-linear"
}

# Convert the hashtable to a JSON string
$bodyJson = $body | ConvertTo-Json -Depth 3

# Send the POST request
Invoke-RestMethod -Uri $apiUrl -Method Post -Body $bodyJson -ContentType "application/json"


# Define the JSON payload
$jsonPayload = @{
    model_path = "microsoft/Phi-3-mini-4k-instruct"
    bits = 8
    dataset_id = "wikitext2"
    quant_method = "gptq"
} | ConvertTo-Json

# Send the POST request
Invoke-RestMethod -Uri "http://localhost:8000/quantize" -Method Post -ContentType "application/json" -Body $jsonPayload

Invoke-RestMethod -Uri http://127.0.0.1:5000/training_progress -Method Get

# Define the URL of the FastAPI load model endpoint
$Url = "http://localhost:8000/load_model/"

# Define the body of the POST request
$Body = @{
    model_name = "Frinkles--Phi3JPInitial"
}

# Convert the body to JSON format
$BodyJson = $Body | ConvertTo-Json

# Send the POST request using Invoke-RestMethod
Invoke-RestMethod -Uri $Url -Method POST -Body $BodyJson -ContentType "application/json"




#PROGRESS FEEDBACK
http://localhost:8000/training_progress


# Define the variables for the request
$hf_token = "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"  # Replace with your Hugging Face token
$repo_id = "Frinkles/test-repo"  # Replace with your Hugging Face repository ID
$model_name = "HuggingFaceTB--SmolLM-135M-Instruct"  # Replace with your model folder name
$server_url = "http://localhost:8000/publish_model/"  # Your FastAPI endpoint URL

# Create the request body as a JSON object
$body = @{
    hf_token = $hf_token
    repo_id = $repo_id
    model_name = $model_name
}

# Convert the body to JSON format
$bodyJson = $body | ConvertTo-Json

# Make the POST request using Invoke-RestMethod
$response = Invoke-RestMethod -Uri $server_url -Method POST -Body $bodyJson -ContentType "application/json"
